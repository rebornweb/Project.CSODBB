@using Unify.Connect.Web
@using Unify.Connect.Web.Extensions
@using Unify.Framework.Web
@model TimeOffsetFlagTransformationViewInformation

@{
    // ReSharper disable Mvc.ControllerNotResolved
    // ReSharper disable Mvc.ActionNotResolved
    Html.RenderAction("SchedulesHeader", "Schedules", new {area = "Framework"});
    // ReSharper restore Mvc.ActionNotResolved
    // ReSharper restore Mvc.ControllerNotResolved
}

@using (Html.DecorateForm(
    () => Html.BeginForm("CreateOrEdit", "TimeOffsetFlagTransformation", FormMethod.Post),
    TransformationResources.SaveTransformationButtonText,
    "SaveTimeOffsetFlagTransformationForm",
    TransformationResources.SaveTransformationButtonAltText
    ))
{
    @Html.TransformationDetailsFor(model => model)

    <fieldset>
        @using (Html.MetaDataFor(model => model.Source, new {description = TransformationResources.TimeOffsetFlagSourceDescription, hideRequired = true}, new {@class = "chzn-form-fieldset-container"}))
        {
            @Html.LabelFor(model => model.Source)
            @Html.SchemaFieldsFor(model => model.Source, Model.AdapterSchema, Model.Source, Model.AdapterSchemaTypes, new[] {Unify.Framework.ValueType.Date, Unify.Framework.ValueType.Timestamp})
        }
        @using (Html.MetaDataFor(model => model.Target, new {description = TransformationResources.TimeOffsetFlagTargetDescription}))
        {
            @Html.LabelFor(model => model.Target)
            @Html.TextBoxFor(model => model.Target)
        }
        @using (Html.MetaDataFor(model => model.EqualValue, new {description = TransformationResources.TimeOffsetFlagEqualToValueDescription}))
        {
            @Html.LabelFor(model => model.EqualValue, TransformationResources.TimeOffsetFlagEqualToValueLabel)
            @Html.TextBoxFor(model => model.EqualValue)
        }
        @using (Html.MetaDataFor(model => model.GreaterValue, new {description = TransformationResources.TimeOffsetFlagGreaterValueDescription}))
        {
            @Html.LabelFor(model => model.GreaterValue, TransformationResources.TimeOffsetFlagGreaterValueLabel)
            @Html.TextBoxFor(model => model.GreaterValue)
        }
        @using (Html.MetaDataFor(model => model.LessThanValue, new {description = TransformationResources.TimeOffsetFlagLessThanValueDescription}))
        {
            @Html.LabelFor(model => model.LessThanValue, TransformationResources.TimeOffsetFlagLessThanValueLabel)
            @Html.TextBoxFor(model => model.LessThanValue)
        }
        @using (Html.MetaDataFor(model => model.NullValue, new {description = TransformationResources.TimeOffsetFlagNullValueDescription}))
        {
            @Html.LabelFor(model => model.NullValue, TransformationResources.TimeOffsetFlagNullValueLabel)
            @Html.TextBoxFor(model => model.NullValue)
        }
        @using (Html.MetaDataFor(model => model.Offset, new {description = TransformationResources.TimeOffsetFlagOffsetDescription}))
        {
            @Html.LabelFor(model => model.Offset)
            <span class="StandardTimeFormat">
                @Html.TextBoxFor(model => model.Offset)
            </span>
        }
        @using (Html.MetaDataFor(model => model.Local, new {description = TransformationResources.TimeOffsetUseLocalDescription}))
        {
            @Html.LabelFor(model => model.Local)
            @Html.CheckBoxFor(model => model.Local)
        }
    </fieldset>
}

<script type="text/javascript">
    $(function () {
        $('span.StandardTimeFormat').unifytimepicker({
            includeDays: true,
            allowNegative: true
        });
    });
</script>