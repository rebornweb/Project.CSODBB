@using Unify.Connect.Web
@using Unify.Connect.Web.Extensions
@using Unify.Framework.Web
@model BusinessDayOffsetFlagViewInformation

@using (Html.DecorateForm(
        () => Html.BeginForm("CreateOrEdit", "BusinessDayOffsetFlagTransformation", FormMethod.Post),
        TransformationResources.SaveTransformationButtonText,
        "SaveBusinessDayOffsetFlagForm",
        TransformationResources.SaveTransformationButtonAltText
    ))
{
    @Html.TransformationDetailsFor(model => model)

    <fieldset>
        @using (Html.MetaDataFor(model => model.Source, new {description = TransformationResources.BusinessDayOffsetFlagTransformationSourceDescription, hideRequired = true}, new {@class = "chzn-form-fieldset-container"}))
        {
            @Html.LabelFor(model => model.Source)
            @Html.SchemaFieldsFor(model => model.Source, Model.AdapterSchema, Model.Source, Model.AdapterSchemaTypes, new[] {Unify.Framework.ValueType.Date, Unify.Framework.ValueType.Timestamp})
        }
        @using (Html.MetaDataFor(model => model.Target, new{ description = TransformationResources.BusinessDayOffsetFlagTransformationTargetDescription }))
        {
            @Html.LabelFor(model => model.Target)
            @Html.TextBoxFor(model => model.Target)
        }
        @using (Html.MetaDataFor(model => model.Offset, new { description = TransformationResources.BusinessDayOffsetFlagTransformationOffsetDescription }))
        {
            @Html.LabelFor(model => model.Offset)
            @Html.TextBoxFor(model => model.Offset)
        }
        @using (Html.MetaDataFor(model => model.EqualValue, new{ description = TransformationResources.BusinessDayOffsetFlagTransformationEqualToDescription }))
        {
            @Html.LabelFor(model => model.EqualValue, TransformationResources.BusinessDayOffsetFlagTransformationEqualToLabel)
            @Html.TextBoxFor(model => model.EqualValue)
        }
        @using (Html.MetaDataFor(model => model.GreaterValue, new { description = TransformationResources.BusinessDayOffsetFlagTransformationGreaterThanDescription }))
        {
            @Html.LabelFor(model => model.GreaterValue, TransformationResources.BusinessDayOffsetFlagTransformationGreaterThanLabel)
            @Html.TextBoxFor(model => model.GreaterValue)
        }
        @using (Html.MetaDataFor(model => model.LesserValue, new { description = TransformationResources.BusinessDayOffsetFlagTransformationLessThanDescription }))
        {
            @Html.LabelFor(model => model.LesserValue, TransformationResources.BusinessDayOffsetFlagTransformationLessThanLabel)
            @Html.TextBoxFor(model => model.LesserValue)
        }
        @using (Html.MetaDataFor(model => model.NullValue, new { description = TransformationResources.BusinessDayOffsetFlagTransformationNullValueDescription }))
        {
            @Html.LabelFor(model => model.NullValue, TransformationResources.BusinessDayOffsetFlagTransformationNullValueLabel)
            @Html.TextBoxFor(model => model.NullValue)
        }
    </fieldset>
}